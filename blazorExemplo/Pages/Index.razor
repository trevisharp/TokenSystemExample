@page "/"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject HttpClient client
@inject ProtectedSessionStorage storage

<PageTitle>Jwt Test</PageTitle>

<p>
    <MatTextField @bind-Value="id"
        Label="ID" ReadOnly="true"
        Disabled="isConnected"></MatTextField>
</p>

<p>
    <MatTextField @bind-Value="name"
        Label="Nome" Icon="contacts"
        Disabled="isConnected"></MatTextField>
</p>

<p>
    <MatCheckbox @bind-Value="isAdm"
        Label="Administrador"
        Disabled="isConnected"></MatCheckbox>
</p>

<p>
    <MatButton OnClick="@Connect">Conectar!</MatButton>
</p>

@if (this.isConnected)
{
    <MatAccordion>
        <MatExpansionPanel @bind-Expanded="changeNameOpen">
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Mudar Nome</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <p>
                    <MatTextField @bind-Value="newName"
                        Label="Novo nome" Icon="contacts">
                        </MatTextField>
                </p>
                <p>
                    <MatButton OnClick="@ChangeName">Salvar Nome</MatButton>
                </p>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
    </MatAccordion>
}

@code
{
    int id;
    string name;
    string newName;
    bool isAdm;
    bool isConnected = false;

    bool changeNameOpen = false;

    public async void Connect()
    {
        isConnected = true;
        User user = new User();
        user.ID = id;
        user.Name = name;
        user.IsAdm = isAdm;

        var response = await client
            .PostAsJsonAsync("connect/", user);

        var content = response.Content;
        var result = await content
            .ReadFromJsonAsync<ConnectMessage>();
        
        await storage.SetAsync("token", result.Token);

        StateHasChanged();
    }

    public async void ChangeName()
    {
        ChangeNameParameters parameters = new ChangeNameParameters();
        parameters.NewName = newName;
        var storageResult = await storage.GetAsync<string>("token");
        parameters.Token = storageResult.Value;

        var response = await client
            .PostAsJsonAsync("changename/", parameters);
        
        var content = response.Content;
        var result = await content
            .ReadFromJsonAsync<ConnectMessage>();
        
        await storage.SetAsync("token", result.Token);
    }

    protected override void OnInitialized()
    {
        Random rand = new Random();
        this.id = rand.Next();
    }
}

